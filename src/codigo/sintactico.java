
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\023\003\000\002\015\013" +
    "\000\002\015\013\000\002\015\013\000\002\015\011\000" +
    "\002\006\003\000\002\006\004\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\017\003" +
    "\000\002\020\004\000\002\020\003\000\002\021\003\000" +
    "\002\016\004\000\002\016\003\000\002\016\004\000\002" +
    "\016\003\000\002\016\004\000\002\016\003\000\002\016" +
    "\004\000\002\016\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\004\000\002\016\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\003\000\002" +
    "\016\004\000\002\016\003\000\002\016\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\004" +
    "\000\002\016\003\000\002\016\004\000\002\016\003\000" +
    "\002\022\004\000\002\005\006\000\002\005\007\000\002" +
    "\014\007\000\002\014\010\000\002\024\003\000\002\004" +
    "\004\000\002\004\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\010\004\001\002\000\004\007\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\023\015\001\002\000\004\004\014\001\002\000" +
    "\006\007\010\023\ufffe\001\002\000\004\023\ufffd\001\002" +
    "\000\004\023\uffff\001\002\000\004\023\015\001\002\000" +
    "\016\004\ufff8\011\ufff8\012\ufff8\022\102\023\103\024\104" +
    "\001\002\000\004\012\017\001\002\000\004\013\020\001" +
    "\002\000\034\006\034\010\040\011\021\012\035\013\023" +
    "\015\024\016\026\017\033\020\031\021\030\022\032\023" +
    "\027\024\025\001\002\000\006\006\uffe0\030\041\001\002" +
    "\000\004\006\077\001\002\000\006\006\uffde\030\041\001" +
    "\002\000\006\006\uffda\030\041\001\002\000\012\006\ufff0" +
    "\014\ufff0\024\025\030\ufff0\001\002\000\006\006\uffd8\030" +
    "\041\001\002\000\012\006\uffed\014\067\023\044\030\uffed" +
    "\001\002\000\006\006\uffd2\030\041\001\002\000\006\006" +
    "\uffd4\030\041\001\002\000\010\006\uffe6\014\062\030\041" +
    "\001\002\000\006\006\uffd6\030\041\001\002\000\006\006" +
    "\uffe4\030\041\001\002\000\006\006\uffdc\030\041\001\002" +
    "\000\010\006\uffe8\014\054\030\041\001\002\000\006\006" +
    "\uffea\030\041\001\002\000\006\006\uffe2\030\041\001\002" +
    "\000\034\006\034\010\040\011\021\012\035\013\023\015" +
    "\024\016\026\017\033\020\031\021\030\022\045\023\044" +
    "\024\025\001\002\000\004\006\uffe3\001\002\000\004\006" +
    "\uffd1\001\002\000\010\006\uffed\023\044\030\uffed\001\002" +
    "\000\006\006\uffe6\030\041\001\002\000\006\006\uffe8\030" +
    "\041\001\002\000\004\006\uffe9\001\002\000\004\006\uffe7" +
    "\001\002\000\006\006\uffee\030\uffee\001\002\000\006\006" +
    "\uffec\030\uffec\001\002\000\004\006\uffeb\001\002\000\004" +
    "\024\025\001\002\000\004\006\056\001\002\000\006\007" +
    "\ufffb\023\ufffb\001\002\000\004\006\uffdd\001\002\000\004" +
    "\006\uffe5\001\002\000\004\006\uffd7\001\002\000\004\022" +
    "\063\001\002\000\004\006\064\001\002\000\006\007\ufffa" +
    "\023\ufffa\001\002\000\004\006\uffd5\001\002\000\004\006" +
    "\uffd3\001\002\000\004\023\070\001\002\000\004\006\071" +
    "\001\002\000\006\007\ufffc\023\ufffc\001\002\000\004\006" +
    "\uffd9\001\002\000\010\006\uffef\014\uffef\030\uffef\001\002" +
    "\000\010\006\ufff1\014\ufff1\030\ufff1\001\002\000\004\006" +
    "\uffdb\001\002\000\004\006\uffdf\001\002\000\006\007\ufff9" +
    "\023\ufff9\001\002\000\004\006\uffe1\001\002\000\016\004" +
    "\ufff6\011\ufff6\012\ufff6\022\102\023\103\024\104\001\002" +
    "\000\016\004\ufff4\011\ufff4\012\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\001\002\000\016\004\ufff3\011\ufff3\012\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\001\002\000\016\004\ufff2\011\ufff2\012" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\001\002\000\010\004\ufff7" +
    "\011\ufff7\012\ufff7\001\002\000\010\004\ufff5\011\ufff5\012" +
    "\ufff5\001\002\000\004\005\172\001\002\000\004\012\111" +
    "\001\002\000\004\013\112\001\002\000\014\015\117\016" +
    "\115\017\113\020\116\021\120\001\002\000\016\010\121" +
    "\015\123\016\122\025\127\026\126\027\130\001\002\000" +
    "\004\006\165\001\002\000\024\010\121\015\117\016\115" +
    "\017\113\020\116\021\120\025\127\026\126\027\130\001" +
    "\002\000\016\010\121\015\123\016\122\025\127\026\126" +
    "\027\130\001\002\000\024\010\121\015\117\016\115\017" +
    "\113\020\116\021\120\025\127\026\126\027\130\001\002" +
    "\000\016\010\121\015\123\016\122\025\127\026\126\027" +
    "\130\001\002\000\004\023\015\001\002\000\024\010\121" +
    "\015\117\016\115\017\113\020\116\021\120\025\127\026" +
    "\126\027\130\001\002\000\024\010\121\015\117\016\115" +
    "\017\113\020\116\021\120\025\127\026\126\027\130\001" +
    "\002\000\026\006\uffbf\010\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\025\uffbf\026\uffbf\027\uffbf\001\002\000" +
    "\026\006\uffbe\010\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\025\uffbe\026\uffbe\027\uffbe\001\002\000\026\006" +
    "\uffbc\010\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\001\002\000\026\006\uffbd\010" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\001\002\000\026\006\uffba\010\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\025\uffba\026\uffba" +
    "\027\uffba\001\002\000\024\010\121\015\117\016\115\017" +
    "\113\020\116\021\120\025\127\026\126\027\130\001\002" +
    "\000\024\010\121\015\117\016\115\017\113\020\116\021" +
    "\120\025\127\026\126\027\130\001\002\000\026\006\uffb8" +
    "\010\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\001\002\000\026\006\uffb7\010\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\001\002\000\026\006\uffb6\010\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\001\002\000\026\006\uffb9\010\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\025\uffb9\026\uffb9\027\uffb9\001" +
    "\002\000\016\010\121\015\123\016\122\025\127\026\126" +
    "\027\130\001\002\000\024\010\121\015\117\016\115\017" +
    "\113\020\116\021\120\025\127\026\126\027\130\001\002" +
    "\000\026\006\uffb4\010\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\025\uffb4\026\uffb4\027\uffb4\001\002\000\026" +
    "\006\uffb3\010\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\001\002\000\026\006\uffb5" +
    "\010\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\001\002\000\026\006\uffb2\010\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\001\002\000\004\011\146\001\002\000\026" +
    "\006\uffbb\010\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\001\002\000\024\010\121" +
    "\015\117\016\115\017\113\020\116\021\120\025\127\026" +
    "\126\027\130\001\002\000\024\010\121\015\117\016\115" +
    "\017\113\020\116\021\120\025\127\026\126\027\130\001" +
    "\002\000\026\006\uffc8\010\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\025\uffc8\026\uffc8\027\uffc8\001\002\000" +
    "\026\006\uffc7\010\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\025\uffc7\026\uffc7\027\uffc7\001\002\000\026\006" +
    "\uffc6\010\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\001\002\000\026\006\uffc9\010" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\001\002\000\026\006\uffca\010\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\025\uffca\026\uffca" +
    "\027\uffca\001\002\000\026\006\uffcb\010\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\001\002\000\016\010\121\015\123\016\122\025\127\026" +
    "\126\027\130\001\002\000\024\010\121\015\117\016\115" +
    "\017\113\020\116\021\120\025\127\026\126\027\130\001" +
    "\002\000\026\006\uffc4\010\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\025\uffc4\026\uffc4\027\uffc4\001\002\000" +
    "\026\006\uffc3\010\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\025\uffc3\026\uffc3\027\uffc3\001\002\000\026\006" +
    "\uffc2\010\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\001\002\000\026\006\uffc5\010" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\001\002\000\006\005\uffce\023\015\001" +
    "\002\000\004\005\uffcd\001\002\000\004\005\uffcc\001\002" +
    "\000\026\006\uffc1\010\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\025\uffc1\026\uffc1\027\uffc1\001\002\000\026" +
    "\006\uffc0\010\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\001\002\000\004\005\173" +
    "\001\002\000\004\023\015\001\002\000\004\004\203\001" +
    "\002\000\006\011\176\023\015\001\002\000\004\002\000" +
    "\001\002\000\004\004\200\001\002\000\004\026\201\001" +
    "\002\000\004\006\202\001\002\000\006\011\uffcf\023\uffcf" +
    "\001\002\000\004\026\204\001\002\000\004\006\205\001" +
    "\002\000\006\011\uffd0\023\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\004\001\001\000\006\003\006\015" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\107\014\106\001\001\000\002\001\001\000\010\003" +
    "\011\015\010\023\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\015\001\001\000\006\007\104\010" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\035\016\021\020\036\001\001\000\004\022\077\001" +
    "\001\000\002\001\001\000\004\022\075\001\001\000\004" +
    "\022\074\001\001\000\006\011\072\017\073\001\001\000" +
    "\004\022\071\001\001\000\006\020\051\021\050\001\001" +
    "\000\004\022\065\001\001\000\004\022\064\001\001\000" +
    "\004\022\047\001\001\000\004\022\060\001\001\000\004" +
    "\022\057\001\001\000\004\022\056\001\001\000\004\022" +
    "\046\001\001\000\004\022\052\001\001\000\004\022\041" +
    "\001\001\000\010\011\045\016\042\020\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\051\021\050" +
    "\001\001\000\004\022\047\001\001\000\004\022\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\105\010\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\113\001\001\000\006\012" +
    "\167\013\170\001\001\000\002\001\001\000\006\004\157" +
    "\012\156\001\001\000\006\012\155\013\154\001\001\000" +
    "\006\004\147\012\146\001\001\000\006\012\123\013\124" +
    "\001\001\000\004\006\144\001\001\000\006\004\137\012" +
    "\136\001\001\000\006\004\131\012\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\135\012\134\001\001" +
    "\000\006\004\133\012\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\143\013\142\001\001\000\006\004\141\012\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\153\012\152\001\001\000\006\004\151\012\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\162\013\163\001\001\000\006\004\161\012" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\107\014\166\024" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\174\006\173\001\001\000\002\001\001\000\004\006\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public List<tablaErrores> tablaE1 = new ArrayList<>();
    public int contador = 1;

    public void syntax_error(Symbol s){ 
            tablaErrores errortabla1= null ;
            System.out.println("Error Sintáctico en la Línea " + (s.left) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
            errortabla1= new tablaErrores(contador,"SINTACTICO","No se esperaba este componente: "+s.value+".",s.left,s.right);
            contador +=1;
            tablaE1.add(errortabla1);
        } 

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            tablaErrores errortabla1= null;
            System.out.println("Error síntactico irrecuperable en la Línea " + 
            (s.left)+ " Columna "+s.right+". Componente " + s.value + 
            " no reconocido."); 

              errortabla1= new tablaErrores(contador,"SINTACTICO","Componente "+s.value+"no reconocido.",s.left,s.right);
              contador+=1;
              tablaE1.add(errortabla1);
        }

    private Symbol s;

    public Symbol getS(){
        return this.s;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LlaveAbierta conjuntos ExpresionesRegulares DoblePorcentaje DoblePorcentaje pruebaExpre LlaveCierra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntos ::= conjuntos1 masconjuntos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntos ::= conjuntos1 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // masconjuntos ::= conjuntos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("masconjuntos",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // conjuntos1 ::= Conjunto DosPuntos Identificador Guion Mayorque Letra GuionCurvo Letra PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos1",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // conjuntos1 ::= Conjunto DosPuntos Identificador Guion Mayorque Numero GuionCurvo Numero PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos1",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // conjuntos1 ::= Conjunto DosPuntos Identificador Guion Mayorque SignosEspeciales GuionCurvo SignosEspeciales PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos1",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conjuntos1 ::= Conjunto DosPuntos Identificador Guion Mayorque datoComa PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("conjuntos1",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Identificador ::= Letra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Identificador",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Identificador ::= Letra OpcionesIdentificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Identificador",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OpcionesIdentificador ::= FinIdentificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesIdentificador",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OpcionesIdentificador ::= FinIdentificador OpcionesIdentificador 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OpcionesIdentificador",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FinIdentificador ::= SignosEspeciales 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FinIdentificador",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FinIdentificador ::= Letra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FinIdentificador",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FinIdentificador ::= Digito 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FinIdentificador",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Numero ::= Digito Numero2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Numero ::= Digito 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Numero2 ::= Numero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Numero2",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Palabra ::= Letra Palabra2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Palabra",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Palabra ::= Letra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Palabra",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Palabra2 ::= Palabra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("Palabra2",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datoComa ::= Palabra comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datoComa ::= Palabra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datoComa ::= Numero comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datoComa ::= Numero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datoComa ::= SignosEspeciales comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // datoComa ::= SignosEspeciales 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datoComa ::= PuntoComa comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // datoComa ::= PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // datoComa ::= LlaveAbierta comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // datoComa ::= LlaveAbierta 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // datoComa ::= LlaveCierra comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datoComa ::= LlaveCierra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datoComa ::= Mayorque comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // datoComa ::= Mayorque 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datoComa ::= Guion comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datoComa ::= Guion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // datoComa ::= Punto comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // datoComa ::= Punto 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datoComa ::= Disyuncion comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datoComa ::= Disyuncion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // datoComa ::= UnoOMas comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // datoComa ::= UnoOMas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // datoComa ::= CeroOMas comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // datoComa ::= CeroOMas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datoComa ::= CeroOUna comaDato 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // datoComa ::= CeroOUna 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("datoComa",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comaDato ::= Coma datoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("comaDato",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pruebaExpre ::= Identificador DosPuntos Cadena PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("pruebaExpre",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pruebaExpre ::= pruebaExpre Identificador DosPuntos Cadena PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("pruebaExpre",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionesRegulares ::= Identificador Guion Mayorque expresiones PuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesRegulares",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionesRegulares ::= Identificador Guion Mayorque expresiones PuntoComa ExpresionesRegulares2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesRegulares",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionesRegulares2 ::= ExpresionesRegulares 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesRegulares2",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresiones ::= CeroOMas CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresiones ::= CeroOMas ExpresionesValidas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresiones ::= Punto CaracteresValidos expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresiones ::= Punto expresiones CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresiones ::= Punto expresiones expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresiones ::= Punto CaracteresValidos CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones ::= Disyuncion CaracteresValidos ExpresionesValidas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones ::= Disyuncion expresiones CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones ::= Disyuncion expresiones expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresiones ::= Disyuncion CaracteresValidos CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresiones ::= UnoOMas CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresiones ::= UnoOMas ExpresionesValidas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones ::= CeroOUna CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones ::= CeroOUna ExpresionesValidas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CaracteresValidos ::= Diagonales 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CaracteresValidos",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CaracteresValidos ::= Cadena 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CaracteresValidos",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CaracteresValidos ::= LlaveAbierta Identificador LlaveCierra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CaracteresValidos",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CaracteresValidos ::= Especial 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CaracteresValidos",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpresionesValidas ::= Punto CaracteresValidos expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpresionesValidas ::= Punto expresiones CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpresionesValidas ::= Punto expresiones expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpresionesValidas ::= Punto CaracteresValidos CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionesValidas ::= Disyuncion CaracteresValidos ExpresionesValidas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionesValidas ::= Disyuncion expresiones CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpresionesValidas ::= Disyuncion expresiones expresiones 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpresionesValidas ::= Disyuncion CaracteresValidos CaracteresValidos 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionesValidas",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
